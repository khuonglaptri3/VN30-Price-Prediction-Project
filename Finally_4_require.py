# =====================================================
# üß† VN30 INSIGHT ANALYZER ‚Äî HI·ªÇN TH·ªä ƒê·∫¶Y ƒê·ª¶ + G·ªòP THEO NG√ÇN H√ÄNG
# =====================================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import warnings
warnings.filterwarnings("ignore")

# === 1. ƒê·ªçc d·ªØ li·ªáu g·ªëc ===
path = r"F:\VN30-Price-Prediction-Project\data1.xlsx"
df = pd.read_excel(path)
print(f"‚úÖ ƒê√£ ƒë·ªçc d·ªØ li·ªáu: {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")

# === 2. L·ªçc c·ªôt s·ªë & t√¨m c·ªôt VN30 ti√™u bi·ªÉu ===
numeric_df = df.select_dtypes(include=[np.number]).copy()
vn30_col = None
for col in numeric_df.columns:
    if "VN30" in col and ("L·∫ßn cu·ªëi" in col or "M·ªü" in col or "Cao" in col or "Th·∫•p" in col):
        vn30_col = col
        break
if vn30_col is None:
    raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt VN30 ph√π h·ª£p trong d·ªØ li·ªáu.")
print(f" Ph√¢n t√≠ch theo c·ªôt: {vn30_col}")

# === 3. T√≠nh t∆∞∆°ng quan v·ªõi VN30 v√† l·ªçc theo ng∆∞·ª°ng ===
corr_matrix = numeric_df.corr(method="pearson")
corr_with_vn30 = corr_matrix[vn30_col].sort_values(ascending=False)
filtered_corr = corr_with_vn30[abs(corr_with_vn30) >= 0.1]

print(f"\n C√°c bi·∫øn c√≥ |r| ‚â• 0.1 v·ªõi VN30: {len(filtered_corr)} bi·∫øn")
print(filtered_corr)
print("-" * 60)

# === 4. BI·ªÇU ƒê·ªí 1: HI·ªÇN TH·ªä ƒê·∫¶Y ƒê·ª¶ T·∫§T C·∫¢ C√ÅC BI·∫æN ===
filtered_corr_df = filtered_corr.reset_index()
filtered_corr_df.columns = ["Bi·∫øn", "H·ªá_s·ªë_t∆∞∆°ng_quan"]

# Chia 2 nh√≥m: d∆∞∆°ng & √¢m
pos_corr = filtered_corr_df[filtered_corr_df["H·ªá_s·ªë_t∆∞∆°ng_quan"] > 0].sort_values(by="H·ªá_s·ªë_t∆∞∆°ng_quan", ascending=True)
neg_corr = filtered_corr_df[filtered_corr_df["H·ªá_s·ªë_t∆∞∆°ng_quan"] < 0].sort_values(by="H·ªá_s·ªë_t∆∞∆°ng_quan", ascending=True)

# KH√îNG gi·ªõi h·∫°n top_n - l·∫•y t·∫•t c·∫£
combined = pd.concat([neg_corr, pos_corr])
combined["Nh√≥m"] = np.where(combined["H·ªá_s·ªë_t∆∞∆°ng_quan"] > 0, "T∆∞∆°ng quan D∆Ø∆†NG", "T∆∞∆°ng quan √ÇM")

# Bi·ªÉu ƒë·ªì Plotly (chia 2 ph√≠a) - HI·ªÇN TH·ªä FULL
fig1 = px.bar(
    combined,
    x="H·ªá_s·ªë_t∆∞∆°ng_quan",
    y="Bi·∫øn",
    orientation="h",
    color="Nh√≥m",
    color_discrete_map={"T∆∞∆°ng quan D∆Ø∆†NG": "#2ca02c", "T∆∞∆°ng quan √ÇM": "#d62728"},
    title=f" Bi·ªÉu ƒë·ªì t∆∞∆°ng quan  gi·ªØa c√°c bi·∫øn & {vn30_col}",
    text="H·ªá_s·ªë_t∆∞∆°ng_quan"
)

fig1.add_vline(x=0, line_dash="dash", line_color="gray")
fig1.update_traces(texttemplate="%{text:.2f}", textposition="outside")
fig1.update_layout(
    yaxis={"categoryorder": "total ascending"},
    height=max(800, len(combined) * 20), 
    xaxis_title="H·ªá s·ªë t∆∞∆°ng quan (r)",
    yaxis_title="Bi·∫øn c·ªï phi·∫øu",
)
fig1.show()

# === 5. BI·ªÇU ƒê·ªí 2: G·ªòP THEO NG√ÇN H√ÄNG/M√É C·ªî PHI·∫æU ===
# Tr√≠ch xu·∫•t m√£ c·ªï phi·∫øu t·ª´ t√™n c·ªôt (VD: "ACB_L·∫ßn cu·ªëi" -> "ACB")
def extract_symbol(col_name):
    """Tr√≠ch xu·∫•t m√£ c·ªï phi·∫øu t·ª´ t√™n c·ªôt."""
    if "_" in col_name:
        return col_name.split("_")[0]
    return col_name

combined["M√£_CP"] = combined["Bi·∫øn"].apply(extract_symbol)

# T√≠nh trung b√¨nh t∆∞∆°ng quan c·ªßa t·ª´ng m√£ c·ªï phi·∫øu
symbol_corr = combined.groupby("M√£_CP")["H·ªá_s·ªë_t∆∞∆°ng_quan"].mean().reset_index()
symbol_corr.columns = ["M√£_CP", "T∆∞∆°ng_quan_TB"]
symbol_corr = symbol_corr.sort_values(by="T∆∞∆°ng_quan_TB", ascending=True)

# Ph√¢n lo·∫°i d∆∞∆°ng/√¢m
symbol_corr["Nh√≥m"] = np.where(symbol_corr["T∆∞∆°ng_quan_TB"] > 0, "T∆∞∆°ng quan D∆Ø∆†NG", "T∆∞∆°ng quan √ÇM")

# Bi·ªÉu ƒë·ªì g·ªôp theo m√£ c·ªï phi·∫øu
fig2 = px.bar(
    symbol_corr,
    x="T∆∞∆°ng_quan_TB",
    y="M√£_CP",
    orientation="h",
    color="Nh√≥m",
    color_discrete_map={"T∆∞∆°ng quan D∆Ø∆†NG": "#2ca02c", "T∆∞∆°ng quan √ÇM": "#d62728"},
    title=" T∆∞∆°ng quan c·ªßa c√°c bi·∫øn v·ªõi VN30 ",
    text="T∆∞∆°ng_quan_TB"
)

fig2.add_vline(x=0, line_dash="dash", line_color="gray")
fig2.update_traces(texttemplate="%{text:.2f}", textposition="outside")
fig2.update_layout(
    yaxis={"categoryorder": "total ascending"},
    height=max(600, len(symbol_corr) * 25),
    xaxis_title="H·ªá s·ªë t∆∞∆°ng quan trung b√¨nh (r)",
    yaxis_title="M√£ c·ªï phi·∫øu",
)
fig2.show()

# === 8. L∆∞u d·ªØ li·ªáu c√°c bi·∫øn c√≥ t∆∞∆°ng quan |r| ‚â• 0.1 ===
selected_cols = list(set(top_features + [vn30_col]))
data_filtered = numeric_df[selected_cols].copy()

# Gi·ªØ th√™m c·ªôt Ng√†y / Date n·∫øu c√≥ trong file g·ªëc
date_cols = [c for c in df.columns if c.lower() in ["ng√†y", "date", "time", "datetime"]]
if date_cols:
    data_filtered = pd.concat([df[date_cols], data_filtered], axis=1)
    print(f" ƒê√£ th√™m c·ªôt th·ªùi gian: {date_cols}")
else:
    print(" Kh√¥ng t√¨m th·∫•y c·ªôt 'Ng√†y' ho·∫∑c 'Date' trong d·ªØ li·ªáu.")

out_path = r"F:\VN30-Price-Prediction-Project\data2.xlsx"
data_filtered.to_excel(out_path, index=False)
print(f"\n ƒê√£ l∆∞u d·ªØ li·ªáu c√°c bi·∫øn c√≥ |r| ‚â• 0.1 v√†o: {out_path}")
print(f" S·ªë bi·∫øn ƒë∆∞·ª£c gi·ªØ l·∫°i: {len(selected_cols)} (k√®m {len(date_cols)} c·ªôt th·ªùi gian n·∫øu c√≥)")

# === 9. Chu·∫©n b·ªã d·ªØ li·ªáu cho PCA & t-SNE ===
numeric_clean = data_filtered.dropna(axis=0, how='any').copy()
numeric_clean = numeric_clean.select_dtypes(include=[np.number])
print(f" D·ªØ li·ªáu sau khi lo·∫°i b·ªè c·ªôt th·ªùi gian: {numeric_clean.shape}")

if numeric_clean.shape[0] == 0:
    raise ValueError("‚ùå D·ªØ li·ªáu sau dropna r·ªóng. H√£y x·ª≠ l√Ω NaN tr∆∞·ªõc.")

scaler = StandardScaler()
scaled_data = scaler.fit_transform(numeric_clean)

# === PCA (2 th√†nh ph·∫ßn) ===
pca = PCA(n_components=2, random_state=42)
pca_result = pca.fit_transform(scaled_data)

# === t-SNE ===
tsne = TSNE(
    n_components=2,
    random_state=42,
    perplexity=30,
    init='pca',
    learning_rate='auto',
    method='barnes_hut',
    max_iter=1000
)
tsne_result = tsne.fit_transform(scaled_data)

# === 10. K·∫øt h·ª£p k·∫øt qu·∫£ PCA & t-SNE ===
dim_df = pd.DataFrame({
    "PCA1": pca_result[:, 0],
    "PCA2": pca_result[:, 1],
    "tSNE1": tsne_result[:, 0],
    "tSNE2": tsne_result[:, 1],
    vn30_col: numeric_clean[vn30_col].values
})

# === 11. Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c Plotly ===
fig_pca = px.scatter(
    dim_df, x="PCA1", y="PCA2",
    color=vn30_col, color_continuous_scale="Viridis",
    title="üî¨ PCA ‚Äî 2 th√†nh ph·∫ßn ch√≠nh",
    hover_data=[vn30_col]
)
fig_pca.show()

fig_tsne = px.scatter(
    dim_df, x="tSNE1", y="tSNE2",
    color=vn30_col, color_continuous_scale="Plasma",
    title="üî¨ t-SNE ‚Äî 2 chi·ªÅu",
    hover_data=[vn30_col]
)
fig_tsne.show()

print("\n Ho√†n t·∫•t ph√¢n t√≠ch PCA + t-SNE v√† l∆∞u file data2.xlsx!")
print(f" T·ªïng s·ªë bi·ªÉu ƒë·ªì ƒë√£ t·∫°o: 6 bi·ªÉu ƒë·ªì (2 bar charts + 2 heatmaps + PCA + t-SNE)")